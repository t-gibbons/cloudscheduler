/*
** From view_group_resouces (normalized resource values) and cloud_flavors,
** determine available resources from the control (_ctl), maximum (_max), and
** used (_used) fields, and rank the rows based on flavor_priority.
*/
create or replace view view_resources_matching_idle_jobs_raw as

/*
** Retrive information.
*/
select
  vgr.group_name,
  vgr.cloud_name,
  authurl,
  project,
  username,
  password,
  keyname,
  cacertificate,
  region,
  userdomainname,
  projectdomainname,
  cloud_type,

  /*
  ** Use case statements to determine available resources for cores and ram. 
  */
  case when cores_max<1 then -1 else case when cores_ctl<0 then cores_max-cores_used else cores_ctl-cores_used end end as cores,
  case when ram_max<1 then -1 else case when ram_ctl<0 then ram_max-ram_used else ram_ctl-ram_used end end as ram,

  name as flavor_name,
  id as flavor_id,
  vcpus as flavor_cores,
  cf.ram as flavor_ram,
  disk as flavor_disk,
  ephemeral_disk as flavor_scratch,
  swap as flavor_swap,

  /*
  ** Use the row_number() DB function to create flavor_priority, ranking flavors by cores, ram, disk, scratch, and swap.
  */
  row_number() over (partition by
    vgr.group_name,
    vgr.cloud_name
  order by
    flavor_cores,
    flavor_ram,
    flavor_disk,
    flavor_scratch,
    flavor_swap
  ) as flavor_priority,

  /*
  ** User the concat() DB function to create (a unique ID for the) flavor.
  */
  concat(vgr.group_name, ":", vgr.cloud_name, ":", cf.name) as flavor

from view_group_resources as vgr
join cloud_flavors as cf on
  vgr.group_name=cf.group_name and
  vgr.cloud_name=cf.cloud_name

order by vgr.group_name,vgr.cloud_name,flavor_priority;
